package com.DFM.DFM_transfer_module;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.amqp.rabbit.annotation.EnableRabbit;

@SpringBootApplication
@EnableRabbit
public class DfmTransferModuleApplication {

	public static void main(String[] args) {
		SpringApplication.run(DfmTransferModuleApplication.class, args);
		//App start page: http://localhost:8080/clubs
		//App start page: http://localhost:8080/players
		//App start page: http://localhost:8080/transfer-list

		/*
		1. нажали на кнопку buy, ушел POST запрос в котроллер TransferController, далее попали в метод TransferService
		2. отсуда TransferService отправили рест запрос в контроллер брокер модуля MessageJsonController
		3. приняли рест запрос в котроллере MessageJsonController, перешли в класс продюссера RabbitMQJsonProducer и отправили смс в раббит
		4. вычитали трансфер модулем, консьюмером RabbitMQJsonConsumer сообщение из раббита и перешли в метод transferFinalOperation() класса TransferService для завершения трансфера.
		 */
		/*
		проверки:
		- рест запрос был отправлен с фронта
		- рест запрос был отправлен с трансфер модуля
		- сообщение было создано в раббит
		- сообщение было вычитано
		- трансфер был завершен за счет смены id клуба игрока и у клуба были вычтены деньги за игрока
		 */

		//Тест-кейсы мы можем писать от аналитики или от UML диаграммы с разветвляющими полями в json.
		//для разветвляющих полей пишем ТК исходя из UML диаграммы
		//для остальных информационных полей в json разбиваем их на группы: число, строка, массив, булеан, налл итд и пишем 1 тест-кейс на 1 группу
		/*
_______________________________________________________________________________________________________________________
		Требования
		Уровень бизнес-требований: В трансферном модуле, менеджер клуба может покупать игроков.
_______________________________________________________________________________________________________________________
		Уровень пользовательских требований (user requirements)
		Вариантов использования (use cases):
			1. № UC00786
			Название	Трансфер игрока
			Описание	Менеджер клуба приобретает игрока на трансферном рынке
			Акторы		Менеджер клуба
			Предусловия	Менеджер клуба зашел в трансферный раздел

			Основной поток событий:
			1. Менеджер клуба переходит в раздел "Трансферы".
			2. В разделе Трансферы отображается список доступных игроков.
			3. Менеджер клуба выбирает игрока из списка, в рамках бюджета клуба.
			4. Менеджер клуба нажимает на кнопку покупки "Buy".
			5. Система проверяет достаточно ли средств у клуба для приобретения выбранного игрока.
			6. Трансфер завершается, игрок переходит в клуб менеджера клуба.
			7. С бюджета клуба вычитаеются средства равные стоимости приобретенного игрока.

			Альтернативный поток событий
			1. На шаге 5 система проверила, что денег в бюджете клуба недостаточно для приобретения выбранного игрока.
			2. Трансфер завершается не успехом.
			3. Игрок не переходит в клуб менеджера.
			4. Средства с бюджета клуба не списываются, тк трансфер завершен не успехом.

			Постусловия:
				Основной поток - Менеджер клуба успешно завершил трансфер игрока.
				Альтернативный поток - Менеджер клуба НЕ успешно завершил трансфер игрока.
_______________________________________________________________________________________________________________________
Стратегия составление тест-кейсов:
## Определение целей тестирования
	Перед написанием тест-кейсов ответьте на вопросы:
	- Что тестируем? (функцию, API, UI, интеграцию)
	- На каком уровне? (Бизнес-уровень("что делает?") или системный уровень("как делает?"))
	- Какие риски покрываем? (основной функционал(позитив, негатив), ошибки, edge cases)

## Группировка тест-кейсов
	### A. По видам тестов			(Unit, Integration, API, UI)
	### B. По уровням тестирования	(бизнес, система)
	### C. По категориям сценариев	(основной функционал(позитив, негатив), ошибки, edge )


## Алгоритм составления тест-кейсов
	### Шаг 1. Разделите тесты по видам
		Вид: Integration, API

	### Шаг 2. Определите уровень
		Уровень: Бизнес-уровень

	### Шаг 3. Покройте все категории сценариев
		Категории: Для каждой функции/эндпоинта/формы:
		1. Основной позитивный случай (минимум данных).
		2. Расширенный позитивный (максимальные/нестандартные, но корректные данные).
		3. Негативный с валидными данными (логически некорректные, но формально допустимые).
		4. Негативный с недопустимыми данными (ошибки валидации).

	### Шаг 4. Приоритезация (сначала основные сценарии(позитив, негатив), потом ошибки, edge cases.)

## Вывод: как систематизировать процесс
	1. Разделяйте тесты по видам (Unit/API/UI/Integration).
	2. Определяйте уровень (бизнес vs системный).
	3. Покрывайте все категории (позитивные/негативные).
	4. Приоритезируйте: сначала основные сценарии(позитив, негатив), потом ошибки, edge cases.
Идеальный процесс: Сначала проверяем бизнес-логику, затем углубляемся в технические детали!!!!!!!!!!!!!!!!
_______________________________________________________________________________________________________________________

Тест-кейсы: (на основе Use case: UC00786 "Трансфер игрока")
### Шаг 1. Вид: Integration
### Шаг 2. Уровень: Бизнес-уровень
### Шаг 3. Категории:	1. Основной позитивный случай (минимум данных).
						2. Негативный с валидными данными (логически некорректные, но формально допустимые).

1. Основной позитивный случай (минимум данных).
	Тест-кейс 1: "Успешный трансфер":
		Шаг																ТД								Ожидаемый результат
		- отправлен POST запрос с фронта на покупку игрока				игрок с id 6					отправлен POST запрос с заполненным в параметрах урл: clubId, playerId.
		- отправлен POST запрос с трансфер модуля в брокер модуль		json объект						получен ответ 200, в теле сообщения json: clubId, playerId, transferRequest true.
		- брокер модуль отправил сообщение в RabbitMQ					json объект						json сообщение поступило в очередь RabbitMQ.
		- трансфер модуль вычитал сообщение из RabbitMQ													в консоли наблюдаем сообщениме "RabbitMQ_Json_Consumer:  Received JSON message -> ...".
		- смена id клуба у игрока																		в таблице Player у записи с id 6, заполнилось поле clubId, id клуба из шага 1.
		- у клуба были вычтены деньги за игрока															в таблице Club у записи клуба бюджет клуба уменьшился на стоимость игрока. SELECT balance FROM public.club WHERE id = {clubId}


2. Негативный с валидными данными (логически некорректные, но формально допустимые).
	Тест-кейс 1: "Не успешный трансфер":
		Шаг																ТД								Ожидаемый результат
		- отправлен POST запрос с фронта на покупку игрока				игрок с id 6					отправлен POST запрос с заполненным в параметрах урл: clubId, playerId.
		- в консоли наблюдаем сообщениме																"Transfer failed! (money not enough)".
		- НЕ отправлен POST запрос с трансфер модуля в брокер модуль									тк у клуба недостаточно денег.
		- НЕ меняется id клуба у игрока 																в таблице Player у записи с id 6, НЕ заполнилось поле clubId, id клубом из шага 1.
		- НЕ меняется бюджет клуба 																		в таблице Club у записи клуба бюджет клуба НЕ изменился.
_______________________________________________________________________________________________________________________

Тест-кейсы: (на основе Use case: UC00786 "Трансфер игрока")
### Шаг 1. Вид: API
### Шаг 2. Уровень: Системный-уровень
### Шаг 3. Категории:	1. Основной позитивный случай (минимум данных).
						2. Негативный с валидными данными (логически некорректные, но формально допустимые).

1. Основной позитивный случай (минимум данных).
	Тест-кейс 1: "Успешный трансфер":
		Шаг																ТД								Ожидаемый результат
		- отправлен POST запрос с фронта на покупку игрока				игрок с id 6					получен код ответа сервера 200, в параметрах урл: clubId, playerId.
		- отправлен POST запрос с трансфер модуля в брокер модуль		json объект						получен код ответа сервера 200, в теле сообщения json: clubId, playerId, transferRequest true.

2. Негативный с валидными данными (логически некорректные, но формально допустимые).
	Тест-кейс 1: "Не успешный трансфер":
		Шаг																ТД								Ожидаемый результат
		- отправлен POST запрос с фронта на покупку игрока				игрок с id 6					получен код ответа сервера 200, в параметрах урл: clubId, playerId.
		- в консоли наблюдаем сообщениме																"Transfer failed! (money not enough)".

		 */










		/*	Цель - покрыть всю аналитику тест-кейсами.
		Все тест-кейсы:
			Позитивные:
				1. Покупка игрока клубом с достаточным кол-вом денег.
				2. Проверить ветвляющее поле в json с true


			Негативные:
				1. Покупка игрока клубом с НЕ достаточным кол-вом денег.
				Ошибки:		(аварийные ситуации)
				2. Попытка передать существующего игрока в несуществующий клуб.
				3. Попытка передать несуществующего игрока в существующий клуб.
				Edge Cases: (граничные случаи)
				4. Передача игрока с максимально допустимой ценой.
				5. Проверить ветвляющее поле в json с false
		 */

	}

}
